- name: Copy Disks to images_cache
  become: yes
  when: "'disks' in vm"
  tags: 
    - vm-disks
    - always
  block:
  - name: Download disk from URL 
    ansible.builtin.get_url:
      url: "{{ item.file_source }}"
      dest: "{{ libvirt_resources_path }}/{{ images_cache }}/{{ item.file_cache_name }}"
    loop: "{{ vm.disks | list }}"
    register: URL
    when: item.type == "url"
  
  - name: Copy local control node file disk (qcow2) to remote
    ansible.builtin.copy:
      src: "{{ item.file_source }}"
      dest: "{{ libvirt_resources_path }}/{{ images_cache }}/{{ item.file_cache_name }}"
    loop: "{{ vm.disks | list }}"
    when: item.type == "copy_file_to_remote"
  
  - name: Copy local file disk (qcow2)
    ansible.builtin.copy:
      remote_src: true
      src: "{{ item.file_source }}"
      dest: "{{ libvirt_resources_path }}/{{ images_cache }}/{{ item.file_cache_name }}"
    loop: "{{ vm.disks | list }}"
    when: item.type == "copy_local_file"

- name: Copy VM Disks from cache to images
  become: yes
  tags: 
    - vm-disks
    - always
  ansible.builtin.copy:
    src: "{{ libvirt_resources_path }}/{{ images_cache }}/{{ item.file_cache_name }}"
    dest: "{{ libvirt_resources_path }}/{{ images }}/{{ item.file_name }}"
    remote_src: true
  loop: "{{ vm.disks | list }}"
  when: "'disks' in vm"
    
- name: Create cloud-init iso file
  become: yes
  become_user: root
  when:
    - "'cloud_init' in vm"
    - "vm.cloud_init"
  tags:
    - always
    - cloud-init
  block:
    - name: copy cloud-init user-data
      ansible.builtin.template:
        src: cloudinit/user-data.j2
        dest: "{{ libvirt_resources_path }}/{{ cloudinit }}/user-data"
    - name: copy cloud-init meta-data
      ansible.builtin.template:
        src: cloudinit/meta-data.j2
        dest: "{{ libvirt_resources_path }}/{{ cloudinit }}/meta-data"
    - name: create the cloud-init iso
      shell:
        cmd: "genisoimage -output {{ libvirt_resources_path }}/{{ cloudinit }}/{{ vm.cloud_init.iso_file }} -input-charset utf-8 -volid cidata -joliet -rock {{ libvirt_resources_path }}/{{ cloudinit }}/user-data {{ libvirt_resources_path }}/{{ cloudinit }}/meta-data"
    - name: Remove cloud-init config files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ libvirt_resources_path }}/{{ cloudinit }}/user-data"
        - "{{ libvirt_resources_path }}/{{ cloudinit }}/meta-data"

- name: Create the VM 
  tags: create-vm
  block:
    - name: Clear Bridge interfaces
      set_fact:
        bridge_interface: []
    - name: Get Bridges interfaces
      include_tasks: get_bridge_interface.yaml
      loop: "{{ vm.network_bridges }}"
      loop_control:
        loop_var: connection
      when: "'network_bridges' in vm and vm.network_bridges"
    - name: show interfaces
      debug:
        msg: "{{ bridge_interface }}"
 
    - name: Define the VM
      community.libvirt.virt:
        name: "{{ vm.name }}"
        command: define
        xml: "{{ lookup('template', 'vm_template.xml.j2') }}"
        uri: 'qemu:///system'
    - name: Start the VM
      community.libvirt.virt:
        name: "{{ vm.name }}"
        state: running
        uri: 'qemu:///system'
